package elfikysys.GUI;

import Models.DatabaseConnection;
import java.awt.Color;
import java.awt.ComponentOrientation;
import java.awt.Insets;
import java.awt.TextField;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Stack;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author javcoder
 */
public class AddContract extends javax.swing.JFrame {

    ArrayList<String> listOfRequirement = new ArrayList<>();
    private int generalPrice = 0;
    private int totalpriceQuen = 0;
    private int selectedRow = -1;
    private String[] tblHead = {"اسم المنتج", "الكميه", "اجمالي السعر"};
    ArrayList<Object> lis = new ArrayList<>();
    ArrayList<Integer> codeLists = new ArrayList<>();
    ArrayList<Integer> totalQaunList = new ArrayList<>();
    ArrayList<Integer> quantittyList = new ArrayList<>();
    ArrayList<Integer> priceList = new ArrayList<>();
    int qq = 0;

    public AddContract() {
        initComponents();
        this.setLocationRelativeTo(null);
        retrieveDataFromDB();
        getDate();
        checkCodeCloumnInDB();

        jTable1.setRowHeight(30);
        descriptionTable.setRowHeight(25);
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        jTable1.setDefaultRenderer(String.class, centerRenderer);
        for (int i = 0; i < jTable1.getColumnCount(); i++) {
            jTable1.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
        }
        notesTextArea.setLineWrap(true);
        notesTextArea.setWrapStyleWord(true);
        notesTextArea.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        notesTextArea.setMargin(new Insets(15, 15, 15, 15));
    }

    private void getDate() {
        Date d = new Date();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
        dayTimeLabel1.setText(String.valueOf(sdf.format(d)));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        back = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        nameTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        phoneTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        addressTextField = new javax.swing.JTextField();
        quantitytemTextField = new javax.swing.JTextField();
        addToDescButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        totalPriceTextField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        restMoneyTextField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        payMoneyTextField = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        payTimeTdaysField = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        recievemonthTextField = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        recieveDaysTextField1 = new javax.swing.JTextField();
        addContractButton = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        payTimemonthtField = new javax.swing.JTextField();
        searchTextField = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        dayTimeLabel1 = new javax.swing.JLabel();
        pricetemTextField1 = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        descriptionTable = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        newContractBtn = new javax.swing.JButton();
        codeTextField = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        newContractBtn1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        notesTextArea = new javax.swing.JTextArea();
        nameItemLabel = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("صفحه اضافه عقد جديد");
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(30, 13, 184), 2, true), "صفحه اضافه عقد ", javax.swing.border.TitledBorder.RIGHT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Monospaced", 1, 18), new java.awt.Color(38, 14, 185))); // NOI18N

        jTable1.setBackground(new java.awt.Color(255, 255, 153));
        jTable1.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "العدد", "السعر", "النوع", "الاسم", "الكود"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            jTable1.getColumnModel().getColumn(4).setResizable(false);
        }

        back.setFont(new java.awt.Font("Monospaced", 1, 16)); // NOI18N
        back.setIcon(new javax.swing.ImageIcon(getClass().getResource("/photos/go_next_blue_60x40.png"))); // NOI18N
        back.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backMouseClicked(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("اسم العميل");

        nameTextField.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        nameTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("الكود :");

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("رقم التليفون :");

        phoneTextField.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        phoneTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        phoneTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                phoneTextFieldKeyTyped(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("العنوان :");

        addressTextField.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        addressTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        quantitytemTextField.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        quantitytemTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        quantitytemTextField.setToolTipText("");
        quantitytemTextField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 0)));
        quantitytemTextField.setName(""); // NOI18N
        quantitytemTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                quantitytemTextFieldKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                quantitytemTextFieldKeyTyped(evt);
            }
        });

        addToDescButton.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        addToDescButton.setText("اضافه الي سله المشتريات");
        addToDescButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToDescButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("الكميه:");

        jLabel6.setFont(new java.awt.Font("Dialog", 1, 17)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("الشغل المطلوب:");

        jLabel7.setFont(new java.awt.Font("Dialog", 1, 17)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("مواصفات الشغل :");

        totalPriceTextField.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        totalPriceTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel8.setFont(new java.awt.Font("Dialog", 1, 17)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("الاجمالي :");

        restMoneyTextField.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        restMoneyTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel9.setFont(new java.awt.Font("Dialog", 1, 17)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("الباقي :");

        payMoneyTextField.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        payMoneyTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        payMoneyTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                payMoneyTextFieldKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                payMoneyTextFieldKeyTyped(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Dialog", 1, 17)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("المدفوع :");

        payTimeTdaysField.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        payTimeTdaysField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        payTimeTdaysField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                payTimeTdaysFieldKeyTyped(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("تاريخ الدفع");

        recievemonthTextField.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        recievemonthTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        recievemonthTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                recievemonthTextFieldKeyTyped(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Dialog", 1, 17)); // NOI18N
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("تاريخ الاستلام");

        jLabel13.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText("يوم");

        jLabel14.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("شهر ");

        recieveDaysTextField1.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        recieveDaysTextField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        recieveDaysTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                recieveDaysTextField1KeyTyped(evt);
            }
        });

        addContractButton.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        addContractButton.setText("اضافه عقد جديد");
        addContractButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addContractButtonActionPerformed(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel15.setText("شهر ");

        jLabel16.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel16.setText("يوم");

        payTimemonthtField.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        payTimemonthtField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        payTimemonthtField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                payTimemonthtFieldKeyTyped(evt);
            }
        });

        searchTextField.setFont(new java.awt.Font("Dialog", 1, 17)); // NOI18N
        searchTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        searchTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchTextFieldKeyReleased(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel17.setText("تاريخ العقد :");

        dayTimeLabel1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        dayTimeLabel1.setForeground(new java.awt.Color(0, 0, 153));
        dayTimeLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        dayTimeLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 0), 2));

        pricetemTextField1.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        pricetemTextField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        pricetemTextField1.setToolTipText("");
        pricetemTextField1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 0)));
        pricetemTextField1.setName(""); // NOI18N
        pricetemTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                pricetemTextField1KeyTyped(evt);
            }
        });

        jLabel18.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel18.setText("السعر");

        descriptionTable.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        descriptionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "اجمالي السعر", "الكميه", "الاسم"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane3.setViewportView(descriptionTable);
        if (descriptionTable.getColumnModel().getColumnCount() > 0) {
            descriptionTable.getColumnModel().getColumn(0).setResizable(false);
            descriptionTable.getColumnModel().getColumn(0).setPreferredWidth(15);
            descriptionTable.getColumnModel().getColumn(1).setResizable(false);
            descriptionTable.getColumnModel().getColumn(1).setPreferredWidth(10);
            descriptionTable.getColumnModel().getColumn(2).setResizable(false);
            descriptionTable.getColumnModel().getColumn(2).setPreferredWidth(100);
        }

        jSeparator1.setBackground(new java.awt.Color(102, 0, 102));
        jSeparator1.setForeground(new java.awt.Color(102, 0, 102));
        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        newContractBtn.setFont(new java.awt.Font("Dialog", 1, 17)); // NOI18N
        newContractBtn.setText("بيع جديد");
        newContractBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newContractBtnActionPerformed(evt);
            }
        });

        codeTextField.setFont(new java.awt.Font("Dialog", 1, 17)); // NOI18N
        codeTextField.setForeground(new java.awt.Color(0, 0, 204));
        codeTextField.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        codeTextField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 0), 2));

        jLabel19.setFont(new java.awt.Font("Dialog", 1, 17)); // NOI18N
        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel19.setText("يمكنك البحث برقم الكود او الاسم ");

        newContractBtn1.setFont(new java.awt.Font("Dialog", 1, 17)); // NOI18N
        newContractBtn1.setText("حذف صنف");
        newContractBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newContractBtn1ActionPerformed(evt);
            }
        });

        notesTextArea.setColumns(20);
        notesTextArea.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        notesTextArea.setRows(5);
        jScrollPane2.setViewportView(notesTextArea);

        nameItemLabel.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        nameItemLabel.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(codeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21)
                        .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(addressTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(phoneTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(restMoneyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(65, 65, 65)
                                .addComponent(jLabel7))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(totalPriceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(51, 51, 51)
                        .addComponent(payMoneyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(174, 174, 174)
                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)
                        .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(recievemonthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(recieveDaysTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9)
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)
                        .addComponent(payTimemonthtField, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(payTimeTdaysField, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(179, 179, 179)
                        .addComponent(dayTimeLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(107, 107, 107)
                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(newContractBtn)
                        .addGap(10, 10, 10)
                        .addComponent(newContractBtn1)
                        .addGap(38, 38, 38)
                        .addComponent(addContractButton, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(3, 3, 3)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(141, 141, 141)
                                .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addComponent(addToDescButton)
                                .addGap(6, 6, 6)
                                .addComponent(pricetemTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(quantitytemTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(nameItemLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(back)))
                        .addGap(0, 6, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1)
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(codeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addressTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(phoneTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(restMoneyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(totalPriceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(payMoneyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(4, 4, 4)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(recievemonthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(recieveDaysTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(payTimemonthtField, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(payTimeTdaysField, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dayTimeLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(newContractBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newContractBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(addContractButton, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 654, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 562, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addToDescButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(pricetemTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(quantitytemTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(nameItemLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(back, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backMouseClicked
        // TODO add your handling code here:
        this.dispose();
        MainPage main = new MainPage();
        main.setVisible(true);
    }//GEN-LAST:event_backMouseClicked

    DefaultTableModel modell;
    int quantity = 0;
    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:

        modell = (DefaultTableModel) jTable1.getModel();
        selectedRow = jTable1.getSelectedRow();

        if (selectedRow != -1) {
            for (int i = 0; i < modell.getRowCount(); i++) {
                if (modell.getValueAt(i, 0).toString().equalsIgnoreCase(jTable1.getValueAt(selectedRow, 0).toString())) {
                    selectedRow = i;
                    break;
                }
            }
            nameItemLabel.setText((String) modell.getValueAt(selectedRow, 1));
            quantity = Integer.parseInt(modell.getValueAt(selectedRow, 4).toString());
            generalPrice = Integer.parseInt(modell.getValueAt(selectedRow, 3).toString());
            quantitytemTextField.setText("1");
            pricetemTextField1.setText(modell.getValueAt(selectedRow, 3).toString());
            pr = Integer.parseInt(modell.getValueAt(selectedRow, 3).toString());
//            int co = (int) model.getValueAt(selectedRow, 0);
//            codeLists.add(co);
//            totalQaunList.add(quantity);
//            qq = quantity;
        } else {
            JOptionPane.showMessageDialog(null, "من فضلك يجب عليك اختيار منتج ");
        }

    }//GEN-LAST:event_jTable1MouseClicked

    private void addToDescButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToDescButtonActionPerformed
        // TODO add your handling code here:

        if (selectedRow != -1) {
            qq = quantity;
            if (quantitytemTextField.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "من فضلك يجب عليك ادخال الكميه ");
                return;
            } else if (Integer.parseInt(quantitytemTextField.getText()) > qq || Integer.parseInt(quantitytemTextField.getText()) == 0) {
                JOptionPane.showMessageDialog(null, "من فضلك يجب عليك ادخال كميه صالحة");
                quantitytemTextField.setText(String.valueOf(qq));
                return;
            } else {
                int flag = 0;
                int co = Integer.parseInt(modell.getValueAt(selectedRow, 0).toString());
                int price = Integer.parseInt(modell.getValueAt(selectedRow, 3).toString());
                if (flag == 0) {
                    codeLists.add(co);
                    priceList.add(price);
                    totalQaunList.add(quantity);
                    int total = Integer.parseInt(pricetemTextField1.getText());
                    pricetemTextField1.setText(String.valueOf(total));
                    String name = nameItemLabel.getText();
                    int quantity = Integer.parseInt(quantitytemTextField.getText());
                    String[] liss = {name, quantitytemTextField.getText(), pricetemTextField1.getText()};
                    lis.add(liss);
                    totalpriceQuen += total;
                    quantittyList.add(quantity);
                    DefaultTableModel model = (DefaultTableModel) descriptionTable.getModel();
                    model.addRow(new Object[]{pricetemTextField1.getText(), quantitytemTextField.getText(), name});
                    totalPriceTextField.setText(String.valueOf(totalpriceQuen));

                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "من فضلك يجب عليك اختيار منتج ");
            return;
        }

        //   updateQuantity() ;
        resetfield();

    }//GEN-LAST:event_addToDescButtonActionPerformed

    private void newContractBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newContractBtnActionPerformed
        // TODO add your handling code here:
        restFields();

    }//GEN-LAST:event_newContractBtnActionPerformed

    private void addContractButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addContractButtonActionPerformed
        // TODO add your handling code here:
        if (nameTextField.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "من فضلك يجب عليك ادخال جميع البيانات عن العميل");
            return;
        }
        if (addressTextField.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "من فضلك يجب عليك ادخال جميع البيانات عن العميل");
            return;
        }

        if (phoneTextField.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "من فضلك يجب عليك ادخال جميع البيانات عن العميل");
            return;
        }
        if (!checkPhoneNumber(phoneTextField)) {
            JOptionPane.showMessageDialog(null, "هذا الرقم غير موجود بالخدمه يجب عليك ادخال رقم صحيح");
            return;
        }
        if (notesTextArea.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "من فضلك يجب عليك ادخال جميع البيانات عن العميل");
            return;
        }
        if (totalPriceTextField.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "من فضلك يجب عليك ادخال جميع البيانات عن العميل");
            return;
        }
        if (payMoneyTextField.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "من فضلك يجب عليك ادخال جميع البيانات عن العميل");
            return;
        }
        if (restMoneyTextField.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "من فضلك يجب عليك ادخال جميع البيانات عن العميل");
            return;
        }
        if (payTimeTdaysField.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "من فضلك يجب عليك ادخال جميع البيانات عن العميل");
            return;
        }
        if (payTimemonthtField.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "من فضلك يجب عليك ادخال جميع البيانات عن العميل");
            return;
        }
        if (recieveDaysTextField1.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "من فضلك يجب عليك ادخال جميع البيانات عن العميل");
            return;
        }
        if (recievemonthTextField.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "من فضلك يجب عليك ادخال جميع البيانات عن العميل");
            return;
        }
        if (Integer.parseInt(payTimeTdaysField.getText()) < 0 || Integer.parseInt(payTimeTdaysField.getText()) > 31) {
            JOptionPane.showMessageDialog(null, " 31 و1 " + " من فضلك يجب عليك ادخال رقم يتراوح بين ");
            return;
        }
        if (Integer.parseInt(payTimemonthtField.getText()) < 0 || Integer.parseInt(payTimemonthtField.getText()) > 12) {
            JOptionPane.showMessageDialog(null, "شهر فقط 12 " + " السنه");
            return;
        }
        if (Integer.parseInt(recieveDaysTextField1.getText()) < 0 || Integer.parseInt(recieveDaysTextField1.getText()) > 31) {
            JOptionPane.showMessageDialog(null, " 31 و1 " + " من فضلك يجب عليك ادخال رقم يتراوح بين ");
            return;
        }
        if (Integer.parseInt(recievemonthTextField.getText()) < 0 || Integer.parseInt(recievemonthTextField.getText()) > 12) {
            JOptionPane.showMessageDialog(null, "شهر فقط 12 " + " السنه");
            return;
        }

        ArrayList<String> l = new ArrayList<>();
        ArrayList<Object> ll = new ArrayList<>();
        DefaultTableModel mo = (DefaultTableModel) descriptionTable.getModel();
        for (int i = 0; i < mo.getRowCount(); i++) {
            for (int j = 0; j < mo.getColumnCount(); j++) {
                l.add((String) mo.getValueAt(i, j));
            }
        }
        ll.addAll(l);
//        for (int i = 0; i < ll.size(); i++) {
//            System.out.println(ll.get(i).toString());
//        }
        String allresult = String.valueOf(ll);
        InsertDataInDB(
                nameTextField.getText(),
                codeTextField.getText(),
                phoneTextField.getText(),
                addressTextField.getText(),
                notesTextArea.getText(),
                allresult,
                totalPriceTextField.getText(),
                restMoneyTextField.getText(),
                payMoneyTextField.getText(),
                payTimeTdaysField.getText(),
                payTimemonthtField.getText(),
                recieveDaysTextField1.getText(),
                recievemonthTextField.getText(),
                dayTimeLabel1.getText()
        );
        show m = new show(Long.parseLong(codeTextField.getText()));
        ImportClient mmm = new ImportClient();
        mmm.setVisible(true);
        mmm.dispose();
//        AddContract ms = new AddContract();
//        ms.setVisible(true);
    }//GEN-LAST:event_addContractButtonActionPerformed

    private void searchTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTextFieldKeyReleased
        // TODO add your handling code here:
//        if (searchTextField.getText().equals("")) {
//            //model.setRowCount(0);
//            //model.setColumnCount(0);
//            retrieveDataFromDB();
//        }
        String m = searchTextField.getText().toLowerCase();
        filter(m);
    }//GEN-LAST:event_searchTextFieldKeyReleased

    private void payMoneyTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_payMoneyTextFieldKeyReleased
        // TODO add your handling code here:
        if (payMoneyTextField.getText().equals("")) {
            restMoneyTextField.setText("");
            return;
        } else if (!payMoneyTextField.getText().equals("")) {
            char c;
            String resu = payMoneyTextField.getText();
            for (int i = 0; i < resu.length(); i++) {
                for (c = 'a'; c < 'z'; c++) {
                    if (resu.charAt(i) == c) {
                        JOptionPane.showMessageDialog(null, "من فضلك يجب عليك ادخال ارقام فقط ولا حروف");
                        payMoneyTextField.setText("");
                        return;
                    }
                }

            }
            int result = Integer.parseInt(totalPriceTextField.getText());
            int result1 = Integer.parseInt(payMoneyTextField.getText());
            if (result1 > result) {
                JOptionPane.showMessageDialog(null, "هناك خطاء ف الحسبه يجب عليك ادخال رقم اقل من الاجمالي ");
            } else {
                int cal = result - result1;
                restMoneyTextField.setText(String.valueOf(cal));
            }
        }
    }//GEN-LAST:event_payMoneyTextFieldKeyReleased
    int pr = 0;
    private void quantitytemTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_quantitytemTextFieldKeyReleased
        // TODO add your handling code here:
        if (!quantitytemTextField.getText().equalsIgnoreCase("")) {
            pricetemTextField1.setText(String.valueOf(pr * Integer.parseInt(quantitytemTextField.getText())));
        }
    }//GEN-LAST:event_quantitytemTextFieldKeyReleased

    private void newContractBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newContractBtn1ActionPerformed
        // TODO add your handling code here:

        int x = -1;
        x = descriptionTable.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) descriptionTable.getModel();
        if (x == -1) {
            JOptionPane.showMessageDialog(null, "يجب عليك اختيار صنف اولا");
        } else {
            int newprice = totalpriceQuen - (Integer.parseInt(model.getValueAt(x, 0).toString()));
            totalpriceQuen = newprice;
            totalPriceTextField.setText(String.valueOf(newprice));
          //System.out.println(newprice);
            model.removeRow(x);
            lis.remove(x);
            codeLists.remove(x);
            totalQaunList.remove(x);
            quantittyList.remove(x);
        }
    }//GEN-LAST:event_newContractBtn1ActionPerformed

    private void payMoneyTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_payMoneyTextFieldKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (c < 48 || c > 57) {
            evt.consume();
        }
    }//GEN-LAST:event_payMoneyTextFieldKeyTyped

    private void recievemonthTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_recievemonthTextFieldKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (c < 48 || c > 57) {
            evt.consume();
        }
    }//GEN-LAST:event_recievemonthTextFieldKeyTyped

    private void recieveDaysTextField1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_recieveDaysTextField1KeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (c < 48 || c > 57) {
            evt.consume();
        }
    }//GEN-LAST:event_recieveDaysTextField1KeyTyped

    private void payTimemonthtFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_payTimemonthtFieldKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (c < 48 || c > 57) {
            evt.consume();
        }
    }//GEN-LAST:event_payTimemonthtFieldKeyTyped

    private void payTimeTdaysFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_payTimeTdaysFieldKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (c < 48 || c > 57) {
            evt.consume();
        }
    }//GEN-LAST:event_payTimeTdaysFieldKeyTyped

    private void quantitytemTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_quantitytemTextFieldKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (c < 48 || c > 57) {
            evt.consume();
        }
    }//GEN-LAST:event_quantitytemTextFieldKeyTyped

    private void pricetemTextField1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pricetemTextField1KeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (c < 48 || c > 57) {
            evt.consume();
        }

    }//GEN-LAST:event_pricetemTextField1KeyTyped

    private void phoneTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_phoneTextFieldKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (c < 48 || c > 57) {
            evt.consume();
        }
    }//GEN-LAST:event_phoneTextFieldKeyTyped

    void filter(String se) {
        TableModel model = jTable1.getModel();
        TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel>((DefaultTableModel) model);
        jTable1.setRowSorter(tr);
        tr.setRowFilter(RowFilter.regexFilter(se, 0, 1));
    }

    private boolean checkPhoneNumber(JTextField phone) {
        int num = 0;
        String Etisalat = "011";
        String vodafone = "010";
        String Orange = "012";
        String We = "015";
        String result = phone.getText();
        for (int i = 0; i < result.length(); i++) {
            num++;
        }
        if ((num > 11 || num < 11) || !(result.subSequence(0, 3).equals(Etisalat) || result.subSequence(0, 3).equals(vodafone)
                || result.subSequence(0, 3).equals(Orange) || result.subSequence(0, 3).equals(We))) {
            return false;
        }

        return true;
    }

    private void resetfield() {
        pricetemTextField1.setText("");
        quantitytemTextField.setText("");
        nameItemLabel.setText("");
    }

    private void retrieveDataFromDB() {

        Connection conn = null;
        Statement st = null;
        ResultSet rs = null;
        ResultSetMetaData rsm = null;
        String query = "SELECT * FROM  items ";
        Vector<String> listColumns = new Vector<>();
        Vector<Object> listData = new Vector<>();

        try {
            conn = DatabaseConnection.getconnection();
            st = conn.createStatement();
            rs = st.executeQuery(query);
            rsm = rs.getMetaData();
            int cot = rsm.getColumnCount();
            for (int i = 1; i < cot; i++) {
                listColumns.addElement(rsm.getColumnName(i));
            }
            while (rs.next()) {
                Vector<Object> lis = new Vector<>(cot);
                for (int x = 1; x < cot; x++) {
                    lis.add(rs.getObject(x));
                }
                if (!lis.get(4).toString().equalsIgnoreCase("0")) {
                    listData.add(lis);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(AddContract.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                if (conn != null) {
                    conn.close();
                }

                if (rs != null) {
                    rs.close();
                }

                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }

        DefaultTableModel model = new DefaultTableModel(listData, listColumns);
        jTable1.setModel(model);

    }

    private void retrieveSpecialFromDB(int result) {
        Connection conn = null;
        Statement st = null;
        ResultSet rs = null;
        ResultSetMetaData rsm = null;
        String query = "SELECT * FROM  Items WHERE Code = '" + result + "' ";

        Vector<String> listColumns = new Vector<>();
        Vector<Object> listData = new Vector<>();

        try {
            conn = DatabaseConnection.getconnection();
            st = conn.createStatement();
            rs = st.executeQuery(query);
            rsm = rs.getMetaData();
            int cot = rsm.getColumnCount();
            for (int i = 1; i < cot; i++) {
                listColumns.addElement(rsm.getColumnName(i));
            }
            if (rs.next() == false) {
                JOptionPane.showMessageDialog(null, "هذا الصنف غير موجود من فضلك قم اختيار كود اخر ");
                return;
            } else {
                //while (rs.next()) {
                Vector<Object> lis = new Vector<>(cot);
                for (int x = 1; x < cot; x++) {
                    lis.add(rs.getObject(x));
                }
                listData.add(lis);
                // }
            }
            do {
                Vector<Object> lis = new Vector<>(cot);
                for (int x = 1; x < cot; x++) {
                    lis.add(rs.getObject(x));
                }
                listData.add(lis);
            } while (rs.next());
        } catch (SQLException ex) {
            Logger.getLogger(AddContract.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                if (conn != null) {
                    conn.close();
                }

                if (rs != null) {
                    rs.close();
                }

                if (st != null) {
                    st.close();
                }
            } catch (Exception e) {
            }
        }

        DefaultTableModel model = new DefaultTableModel(listData, listColumns);
        jTable1.setModel(model);
    }

    private void checkCodeCloumnInDB() {
        Connection conn = null;
        Statement st = null;
        ResultSet rs = null;
        Connection conn2 = null;
        Statement st2 = null;
        ResultSet rs2 = null;
        int max = 0;
        String query = "SELECT MAX(Code) AS Code FROM  contracts  ";
        String query2 = "SELECT MAX(Code) AS Code FROM  endingcontract  ";
        try {
            conn = DatabaseConnection.getconnection();
            st = conn.createStatement();
            rs = st.executeQuery(query);
            if (rs.next() == false) {
                max = 1;
            } else {
                max = rs.getInt("Code") + 1;
            }
        } catch (SQLException ex) {
            Logger.getLogger(AddContract.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                if (conn != null) {
                    conn.close();
                }
                if (st != null) {
                    st.close();
                }
                if (rs != null) {
                    rs.close();
                }

            } catch (Exception e) {
            }
        }
        try {
            conn2 = DatabaseConnection.getconnection();
            st2 = conn2.createStatement();
            rs2 = st2.executeQuery(query2);
            if (rs2.next() == false) {
            } else if (rs2.getInt("Code") >= max) {
                max = rs2.getInt("Code") + 1;
            }
        } catch (SQLException ex) {
            Logger.getLogger(AddContract.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                if (conn2 != null) {
                    conn2.close();
                }
                if (st2 != null) {
                    st2.close();
                }
                if (rs2 != null) {
                    rs2.close();
                }

            } catch (Exception e) {
            }
        }
        codeTextField.setText(String.valueOf(max));
    }

    private void InsertDataInDB(String text, String text0, String text1, String text2, String text3, String result, String text4, String text5,
            String text6, String text7, String text8, String text9, String text10, String text11) {
        Connection conn = null;
        PreparedStatement ps = null;
        int count = 0;
        //String[] o = new String[lis.size()] ;
        String query = ""
                + "INSERT INTO contracts(Code,Name, Address, Phone, Requirements, Notes, Totalprice, Elmadfoaa, Teps, DayDafaa, MonthDafaa, DayEstlam, "
                + "MonthEstlam, dayConytact) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

//        for (int i = 0; i < lis.size(); i++) {
//            o[i] = lis.get(i);
//        }
        try {
            conn = DatabaseConnection.getconnection();
            ps = conn.prepareStatement(query);
            ps.setInt(1, Integer.parseInt(text0));
            ps.setString(2, text);
            ps.setString(3, text2);
            ps.setString(4, text1);
//            for (int i = 0; i < lis.size(); i++) {
//                ps.setString(5, lis.get(i).toString());
//            }
            ps.setString(5, result);
            ps.setString(6, text3);
            ps.setInt(7, Integer.parseInt(text4));
            ps.setInt(8, Integer.parseInt(text6));
            ps.setInt(9, Integer.parseInt(text5));
            ps.setInt(10, Integer.parseInt(text7));
            ps.setInt(11, Integer.parseInt(text8));
            ps.setInt(12, Integer.parseInt(text9));
            ps.setInt(13, Integer.parseInt(text10));
            ps.setString(14, text11);
            count = ps.executeUpdate();
            if (count != 0) {
                JOptionPane.showMessageDialog(null, "تمت عمليه اضافه العقد ");
            } else {
                JOptionPane.showMessageDialog(null, "هناك خطاء ف عمليه الاضافه");
            }
        } catch (SQLException ex) {
            Logger.getLogger(AddContract.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                if (conn != null) {
                    conn.close();
                }
                if (ps != null) {
                    ps.close();
                }
            } catch (Exception e) {
            }
        }
        insertInWaredTable(text0, text, text1, text5, text6, text4, text7, text8, text11);
        updateQuantity();
        MainPage page = new MainPage();
        page.setVisible(true);
        this.dispose();
    }

    private void restFields() {
        nameItemLabel.setText("");
        quantitytemTextField.setText("");
        pricetemTextField1.setText("");
        nameTextField.setText("");
        addressTextField.setText("");
        phoneTextField.setText("");
        notesTextArea.setText("");
        restMoneyTextField.setText("");
        payMoneyTextField.setText("");
        payTimeTdaysField.setText("");
        payTimemonthtField.setText("");
        recieveDaysTextField1.setText("");
        recievemonthTextField.setText("");
        lis.clear();
        DefaultTableModel m = new DefaultTableModel(tblHead, 0);
        m.setRowCount(0);
        descriptionTable.setModel(m);
        totalPriceTextField.setText("");
        codeLists.clear();
        quantittyList.clear();
        totalQaunList.clear();

    }

    private void updateQuantity() {

        Connection conn = null;
        PreparedStatement ps = null;
        //String query = "UPDATE Items SET Quantity = ? WHERE Code = " + co + " ";
        int countt = 0;
        try {
            conn = DatabaseConnection.getconnection();
            for (int i = 0; i < codeLists.size(); i++) {
                String query = "UPDATE items SET Quantity = ? , TotalPrice = ?  WHERE Code = '" + codeLists.get(i) + "' ";
                int result = totalQaunList.get(i) - quantittyList.get(i);
                int calcTotalPrice = priceList.get(i) * result;
                ps = conn.prepareStatement(query);
                ps.setInt(1, result);
                ps.setInt(2, calcTotalPrice);
                countt = ps.executeUpdate();
            }
            if (countt != 0) {
                JOptionPane.showMessageDialog(null, "تمت عمليه تعديل الكميه ");
            } else {
                JOptionPane.showMessageDialog(null, "هناك خطا ف عمليه التعديل ");
            }

        } catch (SQLException ex) {
            Logger.getLogger(AddContract.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                if (conn != null) {
                    conn.close();
                }

                if (ps != null) {
                    ps.close();
                }
            } catch (Exception e) {
            }
        }
        retrieveDataFromDB();

    }

    private void insertInWaredTable(String text0, String text, String text1, String text5, String text6, String text4, String text7, String text8, String text11) {
        Connection conn = null;
        PreparedStatement ps = null;
        String query = "INSERT INTO importsside(Code,Name,Phone,PayMoney,Tips,TotalPrice,DeadlineDay,DeadlineMonth,DateContract) VALUES (?,?,?,?,?,?,?,?,?)";
        int count = 0;

        try {
            conn = DatabaseConnection.getconnection();
            ps = conn.prepareStatement(query);
            ps.setInt(1, Integer.parseInt(text0));
            ps.setString(2, text);
            ps.setString(3, text1);
            ps.setInt(4, Integer.parseInt(text6));
            ps.setInt(5, Integer.parseInt(text5));
            ps.setInt(6, Integer.parseInt(text4));
            ps.setInt(7, Integer.parseInt(text7));
            ps.setInt(8, Integer.parseInt(text8));
            ps.setString(9, text11);
            count = ps.executeUpdate();
            if (count != 0) {
                JOptionPane.showMessageDialog(null, "تم الاضافه");
            } else {
                JOptionPane.showMessageDialog(null, "هناك خظاء");
            }
        } catch (SQLException ex) {
            Logger.getLogger(AddContract.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                if (conn != null) {
                    conn.close();
                }
                if (ps != null) {
                    ps.close();
                }
            } catch (Exception e) {
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddContract.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddContract.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddContract.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddContract.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddContract().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addContractButton;
    private javax.swing.JButton addToDescButton;
    private javax.swing.JTextField addressTextField;
    private javax.swing.JButton back;
    private javax.swing.JLabel codeTextField;
    private javax.swing.JLabel dayTimeLabel1;
    private javax.swing.JTable descriptionTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField nameItemLabel;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JButton newContractBtn;
    private javax.swing.JButton newContractBtn1;
    private javax.swing.JTextArea notesTextArea;
    private javax.swing.JTextField payMoneyTextField;
    private javax.swing.JTextField payTimeTdaysField;
    private javax.swing.JTextField payTimemonthtField;
    private javax.swing.JTextField phoneTextField;
    private javax.swing.JTextField pricetemTextField1;
    private javax.swing.JTextField quantitytemTextField;
    private javax.swing.JTextField recieveDaysTextField1;
    private javax.swing.JTextField recievemonthTextField;
    private javax.swing.JTextField restMoneyTextField;
    private javax.swing.JTextField searchTextField;
    private javax.swing.JTextField totalPriceTextField;
    // End of variables declaration//GEN-END:variables

}
