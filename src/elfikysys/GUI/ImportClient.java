/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package elfikysys.GUI;

import Models.DatabaseConnection;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author javcoder
 */
public class ImportClient extends javax.swing.JFrame {

    //int totalwared = 0;
    private int resultret = 0;
    int tot = 0;

    public ImportClient() {
        initComponents();
        this.setLocationRelativeTo(null);
        getDate();
        CheckAboutElpaky();
        retrieveDataFromWaredDB();
        calcTotalWared();
        //this.tot = resulttot;
        importTable.setRowHeight(30);
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        importTable.setDefaultRenderer(String.class, centerRenderer);
        for (int i = 0; i < importTable.getColumnCount(); i++) {
            importTable.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
        }
    }

    private void getDate() {
        Date d = new Date();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
        dateContract.setText(String.valueOf(sdf.format(d)));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        importTable = new javax.swing.JTable();
        searchBtn = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        nameTextfield = new javax.swing.JTextField();
        clientName = new javax.swing.JLabel();
        clientName1 = new javax.swing.JLabel();
        clientPhone = new javax.swing.JTextField();
        codeTextfield1 = new javax.swing.JTextField();
        clientName2 = new javax.swing.JLabel();
        clientdeadLinedays = new javax.swing.JTextField();
        clientName3 = new javax.swing.JLabel();
        clientName5 = new javax.swing.JLabel();
        clientTotaleprice = new javax.swing.JTextField();
        clientPay = new javax.swing.JTextField();
        clientName6 = new javax.swing.JLabel();
        clientName7 = new javax.swing.JLabel();
        clientChange = new javax.swing.JTextField();
        addimport = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        totalPriceImport = new javax.swing.JTextField();
        backBtn = new javax.swing.JButton();
        searchTextField = new javax.swing.JTextField();
        clientdeadLinemonths = new javax.swing.JTextField();
        clientName4 = new javax.swing.JLabel();
        clientName8 = new javax.swing.JLabel();
        clientAddress = new javax.swing.JTextField();
        dateContract = new javax.swing.JTextField();
        clientName9 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        searchmonthTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("صفحه الواردات اليوميه");
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(29, 12, 218), 2, true), "صفحه الواردات ", javax.swing.border.TitledBorder.RIGHT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Monospaced", 1, 19), new java.awt.Color(15, 16, 193))); // NOI18N

        importTable.setBackground(new java.awt.Color(255, 255, 153));
        importTable.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        importTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "تاريخ الوارد", "شهر الدفع", "يوم الدفع", "الاجمالي", "الباقي", "المبلغ المدفوع", "التليفون", "اسم العميل", "رقم الكود"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        importTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                importTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(importTable);
        if (importTable.getColumnModel().getColumnCount() > 0) {
            importTable.getColumnModel().getColumn(0).setPreferredWidth(15);
            importTable.getColumnModel().getColumn(1).setPreferredWidth(15);
            importTable.getColumnModel().getColumn(2).setPreferredWidth(15);
            importTable.getColumnModel().getColumn(3).setPreferredWidth(15);
            importTable.getColumnModel().getColumn(4).setPreferredWidth(15);
            importTable.getColumnModel().getColumn(5).setPreferredWidth(15);
            importTable.getColumnModel().getColumn(6).setPreferredWidth(15);
            importTable.getColumnModel().getColumn(7).setPreferredWidth(15);
            importTable.getColumnModel().getColumn(8).setPreferredWidth(15);
        }

        searchBtn.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        searchBtn.setText("البحث");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        jTextField1.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        jTextField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        nameTextfield.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        nameTextfield.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        nameTextfield.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(65, 66, 83), 2, true));

        clientName.setFont(new java.awt.Font("Dialog", 1, 17)); // NOI18N
        clientName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        clientName.setText("اسم العميل :");
        clientName.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));

        clientName1.setFont(new java.awt.Font("Dialog", 1, 17)); // NOI18N
        clientName1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        clientName1.setText("رقم التليفون:");
        clientName1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));

        clientPhone.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        clientPhone.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        clientPhone.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(65, 66, 83), 2, true));
        clientPhone.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                clientPhoneKeyTyped(evt);
            }
        });

        codeTextfield1.setEditable(false);
        codeTextfield1.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        codeTextfield1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        codeTextfield1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(65, 66, 83), 2, true));

        clientName2.setFont(new java.awt.Font("Dialog", 1, 17)); // NOI18N
        clientName2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        clientName2.setText("رقم الكود:");
        clientName2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));

        clientdeadLinedays.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        clientdeadLinedays.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        clientdeadLinedays.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(65, 66, 83), 2, true));
        clientdeadLinedays.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                clientdeadLinedaysKeyTyped(evt);
            }
        });

        clientName3.setFont(new java.awt.Font("Dialog", 1, 17)); // NOI18N
        clientName3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        clientName3.setText("يوم الدفع:");
        clientName3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));

        clientName5.setFont(new java.awt.Font("Dialog", 1, 17)); // NOI18N
        clientName5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        clientName5.setText("الاجمالي :");
        clientName5.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));

        clientTotaleprice.setEditable(false);
        clientTotaleprice.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        clientTotaleprice.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        clientTotaleprice.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(65, 66, 83), 2, true));

        clientPay.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        clientPay.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        clientPay.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(65, 66, 83), 2, true));
        clientPay.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                clientPayKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                clientPayKeyTyped(evt);
            }
        });

        clientName6.setFont(new java.awt.Font("Dialog", 1, 17)); // NOI18N
        clientName6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        clientName6.setText("المبلغ المدفوع");
        clientName6.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));

        clientName7.setFont(new java.awt.Font("Dialog", 1, 17)); // NOI18N
        clientName7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        clientName7.setText("الباقي :");
        clientName7.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));

        clientChange.setEditable(false);
        clientChange.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        clientChange.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        clientChange.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(65, 66, 83), 2, true));

        addimport.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        addimport.setText("تجديد العقد");
        addimport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addimportActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 153), 2, true), "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 153))); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 576, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jLabel1.setText("اجمالي الواردات:");

        totalPriceImport.setEditable(false);
        totalPriceImport.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        totalPriceImport.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        backBtn.setFont(new java.awt.Font("Dialog", 1, 17)); // NOI18N
        backBtn.setText("العوده الي القائمه الرئيسيه");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        searchTextField.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        searchTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        searchTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchTextFieldKeyReleased(evt);
            }
        });

        clientdeadLinemonths.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        clientdeadLinemonths.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        clientdeadLinemonths.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(65, 66, 83), 2, true));
        clientdeadLinemonths.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                clientdeadLinemonthsKeyTyped(evt);
            }
        });

        clientName4.setFont(new java.awt.Font("Dialog", 1, 17)); // NOI18N
        clientName4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        clientName4.setText("شهر الدفع:");
        clientName4.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));

        clientName8.setFont(new java.awt.Font("Dialog", 1, 17)); // NOI18N
        clientName8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        clientName8.setText("العنوان:");
        clientName8.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));

        clientAddress.setEditable(false);
        clientAddress.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        clientAddress.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        clientAddress.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(65, 66, 83), 2, true));

        dateContract.setEditable(false);
        dateContract.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        dateContract.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        dateContract.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(65, 66, 83), 2, true));

        clientName9.setFont(new java.awt.Font("Dialog", 1, 17)); // NOI18N
        clientName9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        clientName9.setText("تاريخ الايراد");
        clientName9.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("يمكنك البحث برقم الكود او الاسم ");

        searchmonthTextField.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        searchmonthTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        searchmonthTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchmonthTextFieldKeyReleased(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("البحث بالشهر :");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(84, 84, 84)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(61, 61, 61)
                        .addComponent(searchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(codeTextfield1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(clientName2)
                        .addGap(9, 9, 9)
                        .addComponent(nameTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(clientName))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(134, 134, 134)
                        .addComponent(clientPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(clientName1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(154, 154, 154)
                        .addComponent(clientAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(clientName8, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(clientdeadLinemonths, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(clientName4, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(clientdeadLinedays, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(clientName3, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(clientChange, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addComponent(clientName7, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(clientPay, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(clientName6, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(214, 214, 214)
                        .addComponent(clientTotaleprice, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)
                        .addComponent(clientName5, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(94, 94, 94)
                        .addComponent(dateContract, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(80, 80, 80)
                        .addComponent(clientName9, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(185, 185, 185)
                        .addComponent(addimport, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(134, 134, 134)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(backBtn)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(totalPriceImport, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(24, 24, 24)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(searchmonthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 58, Short.MAX_VALUE)
                        .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25))
                    .addComponent(jScrollPane1)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(codeTextfield1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clientName2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clientName, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(clientPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clientName1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(clientAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clientName8, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(clientdeadLinemonths, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clientName4, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clientdeadLinedays, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clientName3, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(51, 51, 51)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clientChange, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clientName7, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clientPay, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clientName6, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(clientTotaleprice, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clientName5, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dateContract, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clientName9, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addComponent(addimport, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(totalPriceImport, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(32, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(searchmonthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(searchTextField))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        // TODO add your handling code here:
        if (jTextField1.getText().equals("")) {
            JOptionPane.showMessageDialog(null, " فضلك قم بادخال كود عميل لكي يتم البحث عنه");

        } else if (!jTextField1.getText().equals("")) {
            char c;
            String resu = jTextField1.getText();
            for (int i = 0; i < resu.length(); i++) {
                for (c = 'a'; c < 'z'; c++) {
                    if (resu.charAt(i) == c) {
                        JOptionPane.showMessageDialog(null, "من فضلك يجب عليك ادخال ارقام فقط ولا حروف");
                        jTextField1.setText("");
                        return;
                    }
                }
            }
            int code = Integer.parseInt(jTextField1.getText());
            if (code <= 0) {
                JOptionPane.showMessageDialog(null, "هذه القيمه غير صحيحه");
            } else {
                retrieveDatafromDB(code);
            }

        }
    }//GEN-LAST:event_searchBtnActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        this.dispose();
        MainPage f = new MainPage();
        f.setVisible(true);
    }//GEN-LAST:event_backBtnActionPerformed

    private void addimportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addimportActionPerformed
        // TODO add your handling code here:
        if (nameTextfield.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "من فضلك يجب عليك ادخال جميع البيانات عن العميل");
            return;
        }
        if (clientPhone.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "من فضلك يجب عليك ادخال جميع البيانات عن العميل");
            return;
        }
        if (clientdeadLinedays.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "من فضلك يجب عليك ادخال جميع البيانات عن العميل");
            return;
        }
        if (clientdeadLinemonths.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "من فضلك يجب عليك ادخال جميع البيانات عن العميل");
            return;
        }
        if (clientPay.getText().equals("") || Integer.parseInt(clientPay.getText()) < 0) {
            JOptionPane.showMessageDialog(null, "من فضلك يجب عليك ادخال جميع البيانات او هذه القميه غير صحيحه");
            return;
        }
        if (clientChange.getText().equals("") || Integer.parseInt(clientChange.getText()) < 0) {
            JOptionPane.showMessageDialog(null, "من فضلك يجب عليك ادخال جميع البيانات عن العميل");
            return;
        }
        if (clientTotaleprice.getText().equals("") || Integer.parseInt(clientTotaleprice.getText()) < 0) {
            JOptionPane.showMessageDialog(null, "من فضلك يجب عليك ادخال جميع البيانات عن العميل");
            return;
        }
        int code=Integer.parseInt(codeTextfield1.getText());
        String name=nameTextfield.getText();
        String phone=clientPhone.getText();
        int madfo=Integer.parseInt(clientPay.getText());
        int paky=Integer.parseInt(clientChange.getText());
        int total=Integer.parseInt(clientTotaleprice.getText());
        String date= dateContract.getText();
        addedContractImport(
                Integer.parseInt(codeTextfield1.getText()),
                nameTextfield.getText(),
                clientPhone.getText(),
                Integer.parseInt(clientPay.getText()),
                Integer.parseInt(clientChange.getText()),
                Integer.parseInt(clientTotaleprice.getText()),
                Integer.parseInt(clientdeadLinedays.getText()),
                Integer.parseInt(clientdeadLinemonths.getText()),
                dateContract.getText()
        );
        calcTotalWared();
        codeTextfield1.setText("");
        this.dispose();
        ImportClient m=new ImportClient();
        m.setVisible(true);
        showerada mm = new showerada(code, name, phone, madfo, paky, total, date);
    }//GEN-LAST:event_addimportActionPerformed

    private void searchTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTextFieldKeyReleased
        // TODO add your handling code here:
//        if (searchTextField.getText().equals("")) {
//            //model.setRowCount(0);
//            //model.setColumnCount(0);
//            retrieveDataFromWaredDB();
//        }
        String m = searchTextField.getText().toLowerCase();
        filter(m);

    }//GEN-LAST:event_searchTextFieldKeyReleased

    void filter(String se) {
        TableModel model = importTable.getModel();
        TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel>((DefaultTableModel) model);
        importTable.setRowSorter(tr);
        tr.setRowFilter(RowFilter.regexFilter(se, 0, 1));
        calcTotalWared();
    }
    private void clientPayKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_clientPayKeyReleased
        // TODO add your handling code here:
        if (clientPay.getText().equals("")) {
            clientChange.setText(String.valueOf(resultret));
        } else {
            char c;
            String resu = clientPay.getText();
            for (int i = 0; i < resu.length(); i++) {
                for (c = 'a'; c < 'z'; c++) {
                    if (resu.charAt(i) == c) {
                        JOptionPane.showMessageDialog(null, "من فضلك يجب عليك ادخال ارقام فقط ولا حروف");
                        clientPay.setText("");
                        return;
                    }
                }
            }

            int re = Integer.parseInt(clientPay.getText());
            if (re > resultret) {
                JOptionPane.showMessageDialog(null, "من فضلك ادخل قيمه اقل من كدا");
                return;
            }
            int calc = resultret - re;
            clientChange.setText(String.valueOf(calc));
        }
    }//GEN-LAST:event_clientPayKeyReleased

    private void importTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_importTableMouseClicked
        // TODO add your handling code here:
        jTextField1.setText(importTable.getValueAt(importTable.getSelectedRow(), 0).toString());
    }//GEN-LAST:event_importTableMouseClicked

    private void searchmonthTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchmonthTextFieldKeyReleased
        // TODO add your handling code here:
//        if (searchmonthTextField.getText().equals("")) {
//            calcTotalWared();
//        } else {
        String m = searchmonthTextField.getText().toLowerCase();
        filter1(m);
        //}

    }//GEN-LAST:event_searchmonthTextFieldKeyReleased

    private void clientdeadLinedaysKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_clientdeadLinedaysKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (c < 48 || c > 57) {
            evt.consume();
        }
    }//GEN-LAST:event_clientdeadLinedaysKeyTyped

    private void clientdeadLinemonthsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_clientdeadLinemonthsKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (c < 48 || c > 57) {
            evt.consume();
        }
    }//GEN-LAST:event_clientdeadLinemonthsKeyTyped

    private void clientPayKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_clientPayKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (c < 48 || c > 57) {
            evt.consume();
        }
    }//GEN-LAST:event_clientPayKeyTyped

    private void clientPhoneKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_clientPhoneKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (c < 48 || c > 57) {
            evt.consume();
        }
    }//GEN-LAST:event_clientPhoneKeyTyped

    void filter1(String se) {
        TableModel model = importTable.getModel();
        TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel>((DefaultTableModel) model);
        importTable.setRowSorter(tr);
        tr.setRowFilter(RowFilter.regexFilter(se, 7));
        calcTotalWared1();
    }
    int elmadfoaa = 0;

    private void retrieveDatafromDB(int code) {
        Connection conn = null;
        PreparedStatement ps = null;
        String query = "SELECT Code ,  Name ,  Address , Phone ,  Totalprice  , Elmadfoaa ,  Teps , DayDafaa , MonthDafaa  FROM contracts WHERE Code = " + code + " ";
        ResultSet rs = null;

        try {
            conn = DatabaseConnection.getconnection();
            ps = conn.prepareStatement(query);
            rs = ps.executeQuery();
            if (rs.next() == false) {
                JOptionPane.showMessageDialog(null, "هذا العميل غير موجود من فضلك قم اختيار كود اخر ");
                return;
            } else {
                codeTextfield1.setText(String.valueOf(rs.getInt("Code")));
                nameTextfield.setText(rs.getString("Name"));
                clientAddress.setText(rs.getString("Address"));
                clientPhone.setText(rs.getString("Phone"));
                clientTotaleprice.setText(String.valueOf(rs.getInt("Totalprice")));
                elmadfoaa = rs.getInt("Elmadfoaa");
                clientChange.setText(String.valueOf(rs.getInt("Teps")));
                resultret = rs.getInt("Teps");
                clientdeadLinedays.setText(String.valueOf(rs.getInt("DayDafaa")));
                clientdeadLinemonths.setText(String.valueOf(rs.getInt("MonthDafaa")));
            }
        } catch (SQLException ex) {
            Logger.getLogger(ImportClient.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                if (conn != null) {
                    conn.close();
                }
                if (ps != null) {
                    ps.close();
                }
                if (rs != null) {
                    rs.close();
                }
            } catch (Exception e) {
            }
        }
    }

    private void addedContractImport(int text, String text0, String text1, int parseInt, int parseInt0, int parseInt1, int parseInt2, int parseInt3, String text2) {
        Connection conn = null;
        PreparedStatement ps = null;
        String query = "INSERT INTO importsside ( Code ,  Name , Phone , PayMoney , Tips , TotalPrice , DeadlineDay , DeadlineMonth , DateContract ) VALUES (?,?,?,?,?,?,?,?,?)";
        int countt = 0;

        try {
            conn = DatabaseConnection.getconnection();
            ps = conn.prepareStatement(query);
            ps.setInt(1, text);
            ps.setString(2, text0);
            ps.setString(3, text1);
            ps.setInt(4, parseInt);
            ps.setInt(5, parseInt0);
            ps.setInt(6, parseInt1);
            ps.setInt(7, parseInt2);
            ps.setInt(8, parseInt3);
            ps.setString(9, text2);
            countt = ps.executeUpdate();
            if (countt != 0) {
                JOptionPane.showMessageDialog(null, "تمت عمليه اضافه الوارد");
            } else {
                JOptionPane.showMessageDialog(null, "هناك خطاء ف عمليه الاضافه");
                return;
            }
        } catch (SQLException ex) {
            Logger.getLogger(ImportClient.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                if (conn != null) {
                    conn.close();
                }
                if (ps != null) {
                    ps.close();
                }
            } catch (Exception e) {
            }
        }
        updateContract(text, text0, text1, parseInt, parseInt0, parseInt1, parseInt2, parseInt3);
        reStart();
    }

    private void updateContract(int text, String text0, String text1, int parseInt, int parseInt0, int parseInt1, int parseInt2, int parseInt3) {
        Connection conn = null;
        PreparedStatement ps = null;
        int counttt = 0;
        String query = "UPDATE contracts SET Name =?, Phone =?, Totalprice =?, Elmadfoaa =?, Teps =?, DayDafaa =?, MonthDafaa =? WHERE Code = " + text + "";

        try {
            conn = DatabaseConnection.getconnection();
            ps = conn.prepareStatement(query);
            int calc = elmadfoaa + parseInt;
            ps.setString(1, text0);
            ps.setString(2, text1);
            ps.setInt(3, parseInt1);
            ps.setInt(4, calc);
            ps.setInt(5, parseInt0);
            ps.setInt(6, parseInt2);
            ps.setInt(7, parseInt3);
            counttt = ps.executeUpdate();
            if (counttt != 0) {
                JOptionPane.showMessageDialog(null, "تم عمليه التعديل");
            } else {
                JOptionPane.showMessageDialog(null, "تم عمليه التعديل");
                return;
            }
        } catch (SQLException ex) {
            Logger.getLogger(ImportClient.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                if (conn != null) {
                    conn.close();
                }
                if (ps != null) {
                    ps.close();
                }
            } catch (Exception e) {
            }
        }
        retrieveDataFromWaredDB();
    }

    private void reStart() {
        jTextField1.setText("");
        nameTextfield.setText("");
        clientAddress.setText("");
        clientChange.setText("");
        clientPhone.setText("");
        clientPay.setText("");
        clientTotaleprice.setText("");
        clientdeadLinedays.setText("");
        clientdeadLinemonths.setText("");
    }

    private void retrieveDataFromWaredDB() {
        Vector<String> columnsName = new Vector<>();
        Vector<Object> datalist = new Vector<>();
        columnsName.add("رقم الكود");
        columnsName.add("اسم العميل ");
        columnsName.add("التليفون");
        columnsName.add("المبلغ المدفوع");
        columnsName.add("الباقي");
        columnsName.add("الاجمالي");
        columnsName.add("يوم الدفع");
        columnsName.add("شهر الدفع");
        columnsName.add("تاريخ الوارد");

        Connection conn = null;
        Statement st = null;
        ResultSet rs = null;
        String query = "SELECT * FROM importsside";
        ResultSetMetaData rsm = null;

        try {
            conn = DatabaseConnection.getconnection();
            st = conn.createStatement();
            rs = st.executeQuery(query);
            if (rs.next() == false) {
                return;
            } else {
                rsm = rs.getMetaData();
                int cot = rsm.getColumnCount();
                do {
                    Vector<Object> list = new Vector<>(cot);
                    for (int i = 1; i <= cot; i++) {
                        list.add(rs.getObject(i));
                    }
                    datalist.add(list);
                } while (rs.next());
            }

        } catch (SQLException ex) {
            Logger.getLogger(ImportClient.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                if (conn != null) {
                    conn.close();
                }

                if (st != null) {
                    st.close();
                }

                if (rs != null) {
                    rs.close();
                }
            } catch (Exception e) {
            }
        }
        DefaultTableModel model = new DefaultTableModel(datalist, columnsName);
        importTable.setModel(model);

    }

    private void retrieveSpecialFromDB(int result) {
        Vector<String> columnsName = new Vector<>();
        Vector<Object> datalist = new Vector<>();
        columnsName.add("رقم الكود");
        columnsName.add("اسم العميل ");
        columnsName.add("التليفون");
        columnsName.add("المبلغ المدفوع");
        columnsName.add("الباقي");
        columnsName.add("الاجمالي");
        columnsName.add("يوم الدفع");
        columnsName.add("شهر الدفع");
        columnsName.add("تاريخ الوارد");

        Connection conn = null;
        Statement st = null;
        ResultSet rs = null;
        String query = "SELECT * FROM ImportsSide WHERE Code = '" + result + "' ";
        ResultSetMetaData rsm = null;

        try {
            conn = DatabaseConnection.getconnection();
            st = conn.createStatement();
            rs = st.executeQuery(query);
            if (rs.next() == false) {
                JOptionPane.showMessageDialog(null, "هذا الوارد غير موجود من فضلك قم اختيار كود اخر ");
                return;
            } else {
                rsm = rs.getMetaData();
                int cot = rsm.getColumnCount();
                do {
                    Vector<Object> list = new Vector<>(cot);
                    for (int i = 1; i <= cot; i++) {
                        list.add(rs.getObject(i));
                    }
                    datalist.add(list);
                } while (rs.next());
            }

        } catch (SQLException ex) {
            Logger.getLogger(ImportClient.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                if (conn != null) {
                    conn.close();
                }

                if (st != null) {
                    st.close();
                }

                if (rs != null) {
                    rs.close();
                }
            } catch (Exception e) {
            }
        }
        DefaultTableModel model = new DefaultTableModel(datalist, columnsName);
        importTable.setModel(model);

    }

    private void calcTotalWared() {
        int resulttot = 0;
        DefaultTableModel moo = (DefaultTableModel) importTable.getModel();
        for (int i = 0; i < importTable.getRowCount(); i++) {
            resulttot += Integer.parseInt(importTable.getValueAt(i, 3).toString());
        }
        totalPriceImport.setText(String.valueOf(resulttot));
    }

    private void calcTotalWared1() {
        int resulttot = 0;
        DefaultTableModel moo = (DefaultTableModel) importTable.getModel();
        for (int i = 0; i < importTable.getRowCount(); i++) {
            resulttot += Integer.parseInt(importTable.getValueAt(i, 3).toString());
        }
        totalPriceImport.setText(String.valueOf(resulttot));
    }

    private void CheckAboutElpaky() {
        Connection conn = null;
        Statement st = null;
        ResultSet rs = null;
        String query = "SELECT Code, Name, Address, Phone, Requirements, Notes, Teps,  DayEstlam, MonthEstlam, dayConytact FROM contracts WHERE Teps = " + 0 + " ";
        try {
            conn = DatabaseConnection.getconnection();
            st = conn.createStatement();
            rs = st.executeQuery(query);
            if (rs.next() == false) {
                return;
            } else {
                do {
                    String name = rs.getString("Name");
                    String address = rs.getString("Address");
                    String phone = rs.getString("Phone");
                    String requi = rs.getString("Requirements");
                    String note = rs.getString("Notes");
                    String datecont = rs.getString("dayConytact");
                    int code = rs.getInt("Code");
                    int day = rs.getInt("DayEstlam");
                    int month = rs.getInt("MonthEstlam");
                    insertInEningingContractDB(code, name, address, phone, requi, note, day, month, datecont);

                } while (rs.next());
            }

        } catch (SQLException ex) {
            Logger.getLogger(ImportClient.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                if (conn != null) {
                    conn.close();
                }
                if (st != null) {
                    st.close();
                }
                if (rs != null) {
                    rs.close();
                }
            } catch (Exception e) {
            }
        }

    }

    private void insertInEningingContractDB(int code, String name, String address, String phone, String requi, String note, int day, int month, String datecont) {
        Connection conn = null;
        PreparedStatement ps = null;
        String query = "INSERT INTO endingcontract(Code,Name,address,phone,requirements,notes,dayRecieving,monthRecieving,dateContract) VALUES (? ,? ,? ,?, ? ,? , ? , ? , ?)";
        int count = 0;
        try {
            conn = DatabaseConnection.getconnection();
            ps = conn.prepareStatement(query);
            ps.setInt(1, code);
            ps.setString(2, name);
            ps.setString(3, address);
            ps.setString(4, phone);
            ps.setString(5, requi);
            ps.setString(6, note);
            ps.setInt(7, day);
            ps.setInt(8, month);
            ps.setString(9, datecont);
            count = ps.executeUpdate();
            SelectFromImportTable(code);
            RemoveRow(code);
        } catch (SQLException ex) {
            Logger.getLogger(ImportClient.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                if (conn != null) {
                    conn.close();
                }
                if (ps != null) {
                    ps.close();
                }

            } catch (Exception e) {
            }
        }

    }

    private void SelectFromImportTable(int code) {
        Connection conn = null;
        Statement st = null;
        ResultSet rs = null;
        String query = "SELECT * FROM importsside WHERE Code = '" + code + "' ";
        try {
            conn = DatabaseConnection.getconnection();
            st = conn.createStatement();
            rs = st.executeQuery(query);
            while (rs.next()) {
                String name = rs.getString("Name");
                String phone = rs.getString("Phone");
                String datecontr = rs.getString("DateContract");
                int cod = rs.getInt("Code");
                int paymoney = rs.getInt("PayMoney");
                int tips = rs.getInt("Tips");
                int total = rs.getInt("TotalPrice");
                int deadDay = rs.getInt("DeadlineDay");
                int deadMonth = rs.getInt("DeadlineMonth");
                insertIntoEndingImport(cod, name, phone, paymoney, tips, total, deadDay, deadMonth, datecontr);
            }
        } catch (SQLException ex) {
            Logger.getLogger(ImportClient.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                if (conn != null) {
                    conn.close();
                }
                if (st != null) {
                    st.close();
                }
                if (rs != null) {
                    rs.close();
                }
            } catch (Exception e) {
            }
        }

    }

    private void RemoveRow(int code) {
        Connection conn = null;
        PreparedStatement ps = null;
        String query = "DELETE FROM contracts WHERE Code = '" + code + "' ";
        int count = 0;

        try {
            conn = DatabaseConnection.getconnection();
            ps = conn.prepareStatement(query);
            count = ps.executeUpdate();
        } catch (SQLException ex) {
            Logger.getLogger(ImportClient.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                if (conn != null) {
                    conn.close();
                }
                if (ps != null) {
                    ps.close();
                }
            } catch (Exception e) {
            }
        }

    }

    private void insertIntoEndingImport(int cod, String name, String phone, int paymoney, int tips, int total, int deadDay, int deadMonth, String datecontr) {
        Connection con = null;
        PreparedStatement ps = null;
        String query = "INSERT INTO importdetails(Code,Name,Phone,PayMoney,Tips,TotalPrice,DeadliDay,DeadlieMonth,datecont) VALUES (?,?,?,?,?,?,?,?,?)";
        int count = 0;

        try {
            con = DatabaseConnection.getconnection();
            ps = con.prepareStatement(query);
            ps.setInt(1, cod);
            ps.setString(2, name);
            ps.setString(3, phone);
            ps.setInt(4, paymoney);
            ps.setInt(5, tips);
            ps.setInt(6, total);
            ps.setInt(7, deadDay);
            ps.setInt(8, deadMonth);
            ps.setString(9, datecontr);
            count = ps.executeUpdate();
            //removeFromImportTable(cod);
        } catch (SQLException ex) {
            Logger.getLogger(ImportClient.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                if (con != null) {
                    con.close();
                }
                if (ps != null) {
                    ps.close();
                }
            } catch (Exception e) {
            }
        }

    }

    private void removeFromImportTable(int cod) {
        Connection conn = null;
        PreparedStatement ps = null;
        String query = "DELETE FROM importsside WHERE Code = '" + cod + "' ";
        int count = 0;

        try {
            conn = DatabaseConnection.getconnection();
            ps = conn.prepareStatement(query);
            count = ps.executeUpdate();
        } catch (SQLException ex) {
            Logger.getLogger(ImportClient.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                if (conn != null) {
                    conn.close();
                }
                if (ps != null) {
                    ps.close();
                }
            } catch (Exception e) {
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ImportClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ImportClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ImportClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ImportClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ImportClient().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addimport;
    private javax.swing.JButton backBtn;
    private javax.swing.JTextField clientAddress;
    private javax.swing.JTextField clientChange;
    private javax.swing.JLabel clientName;
    private javax.swing.JLabel clientName1;
    private javax.swing.JLabel clientName2;
    private javax.swing.JLabel clientName3;
    private javax.swing.JLabel clientName4;
    private javax.swing.JLabel clientName5;
    private javax.swing.JLabel clientName6;
    private javax.swing.JLabel clientName7;
    private javax.swing.JLabel clientName8;
    private javax.swing.JLabel clientName9;
    private javax.swing.JTextField clientPay;
    private javax.swing.JTextField clientPhone;
    private javax.swing.JTextField clientTotaleprice;
    private javax.swing.JTextField clientdeadLinedays;
    private javax.swing.JTextField clientdeadLinemonths;
    private javax.swing.JTextField codeTextfield1;
    private javax.swing.JTextField dateContract;
    private javax.swing.JTable importTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField nameTextfield;
    private javax.swing.JButton searchBtn;
    private javax.swing.JTextField searchTextField;
    private javax.swing.JTextField searchmonthTextField;
    private javax.swing.JTextField totalPriceImport;
    // End of variables declaration//GEN-END:variables

}
